--- crash-5.0.0/x86_64.c.orig
+++ crash-5.0.0/x86_64.c
@@ -2907,6 +2907,10 @@ in_exception_stack:
 					bt->stackbase);
 
 			case BT_EXCEPTION_STACK:
+				if (in_user_stack(bt->tc->task, rsp)) {
+					done = TRUE;
+					break;
+				}
 				error(FATAL, STACK_TRANSITION_ERRMSG_E_P,
 					bt_in->stkptr, rsp, bt->stackbase);
 
@@ -3770,6 +3774,8 @@ static int 
 x86_64_eframe_verify(struct bt_info *bt, long kvaddr, long cs, long ss,
 	long rip, long rsp, long rflags)
 {
+	int estack;
+
 	if ((rflags & RAZ_MASK) || !(rflags & 0x2))
 		return FALSE;
 
@@ -3781,6 +3787,21 @@ x86_64_eframe_verify(struct bt_info *bt,
 		    IS_KVADDR(rsp) &&
 		    (rsp == (kvaddr + SIZE(pt_regs))))
                         return TRUE;
+
+		if (is_kernel_text(rip) && 
+		    (bt->flags & BT_EXCEPTION_STACK) &&
+		    in_user_stack(bt->tc->task, rsp))
+                        return TRUE;
+
+		if (is_kernel_text(rip) && !IS_KVADDR(rsp) &&
+		    (bt->flags & BT_EFRAME_SEARCH) &&
+		    x86_64_in_exception_stack(bt, NULL))
+			return TRUE;
+
+		if (is_kernel_text(rip) && 
+		    x86_64_in_exception_stack(bt, &estack) &&
+		    (estack <= 1))
+			return TRUE;
         }
 
         if ((cs == 0x10) && kvaddr) {
--- crash-5.0.0/memory.c.orig
+++ crash-5.0.0/memory.c
@@ -3423,6 +3423,32 @@ clear_vma_cache(void)
 	vt->vma_cache_index = 0;
 }
 
+/*
+ *  Check whether an address is a user stack address based
+ *  upon its vm_area_struct flags.
+ */
+int
+in_user_stack(ulong task, ulong vaddr) 
+{
+	ulong vma, vm_flags;
+	char *vma_buf;
+
+	if ((vma = vm_area_dump(task, UVADDR|VERIFY_ADDR, vaddr, 0))) {
+		vma_buf = fill_vma_cache(vma);
+		vm_flags = SIZE(vm_area_struct_vm_flags) == sizeof(short) ?
+			USHORT(vma_buf+ OFFSET(vm_area_struct_vm_flags)) :
+			ULONG(vma_buf+ OFFSET(vm_area_struct_vm_flags));
+
+		if (vm_flags & (VM_GROWSUP|VM_GROWSDOWN))
+			return TRUE;
+		/*
+		 *  per-thread stack
+		 */
+		if ((vm_flags & (VM_READ|VM_WRITE)) == (VM_READ|VM_WRITE))
+			return TRUE;
+	}
+	return FALSE;
+}
 
 /*
  *  Fill in the task_mem_usage structure with the RSS, virtual memory size,
