--- crash-5.0.0/x86_64.c.orig
+++ crash-5.0.0/x86_64.c
@@ -2308,6 +2308,56 @@ text_lock_function(char *name, struct bt
 
 }
 
+/*
+ * As of 2.6.29, the handy check for the "error_exit:" label
+ * no longer applies; it became an entry point that was jmp'd to 
+ * after the exception handler was called.  Therefore, if the 
+ * return address is an offset from any of these functions, 
+ * then the exception frame should be checked for:
+ *
+ * .macro errorentry sym do_sym
+ * errorentry invalid_TSS do_invalid_TSS
+ * errorentry segment_not_present do_segment_not_present
+ * errorentry alignment_check do_alignment_check
+ * errorentry xen_stack_segment do_stack_segment
+ * errorentry general_protection do_general_protection
+ * errorentry page_fault do_page_fault
+ *
+ * .macro zeroentry sym do_sym
+ * zeroentry divide_error do_divide_error
+ * zeroentry overflow do_overflow
+ * zeroentry bounds do_bounds
+ * zeroentry invalid_op do_invalid_op
+ * zeroentry device_not_available do_device_not_available
+ * zeroentry coprocessor_segment_overrun do_coprocessor_segment_overrun
+ * zeroentry spurious_interrupt_bug do_spurious_interrupt_bug
+ * zeroentry coprocessor_error do_coprocessor_error
+ * zeroentry simd_coprocessor_error do_simd_coprocessor_error
+ * zeroentry xen_hypervisor_callback xen_do_hypervisor_callback
+ * zeroentry xen_debug do_debug
+ * zeroentry xen_int3 do_int3
+*/
+static const char *exception_functions[] = {
+	"invalid_TSS",
+	"segment_not_present",
+	"alignment_check",
+	"xen_stack_segment",
+	"general_protection",
+	"page_fault",
+	"divide_error",
+	"overflow",
+	"bounds",
+	"invalid_op",
+	"device_not_available",
+	"coprocessor_segment_overrun",
+	"spurious_interrupt_bug",
+	"coprocessor_error",
+	"simd_coprocessor_error",
+	"xen_hypervisor_callback",
+	"xen_debug",
+	"xen_int3",
+	NULL,
+};
 
 /*
  *  print one entry of a stack trace
@@ -2324,7 +2374,7 @@ x86_64_print_stack_entry(struct bt_info 
 	ulong rsp, offset, locking_func;
 	struct syment *sp, *spl;
 	char *name;
-	int result; 
+	int i, result; 
 	long eframe_check;
 	char buf[BUFSIZE];
 
@@ -2372,8 +2422,16 @@ x86_64_print_stack_entry(struct bt_info 
 		}
 	}
 
-	if (STREQ(name, "invalid_op"))
-		eframe_check = 8;
+	if ((THIS_KERNEL_VERSION >= LINUX(2,6,29)) && 
+	    (eframe_check == -1) && offset && 
+	    !(bt->flags & (BT_EXCEPTION_FRAME|BT_START|BT_SCHEDULE))) { 
+		for (i = 0; exception_functions[i]; i++) {
+			if (STREQ(name, exception_functions[i])) {
+				eframe_check = 8;
+				break;
+			}
+		}
+	}
 
 	if (bt->flags & BT_SCHEDULE)
 		name = "schedule";
